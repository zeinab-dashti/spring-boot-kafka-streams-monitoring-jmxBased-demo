services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - monitoring

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
      - "9999:9999"  # JMX Port for Kafka (optional)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_JMX_PORT: 9999  # Enable JMX monitoring
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    networks:
      - monitoring

  kafka-streams-app: # the container name used in prometheus.yml
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - KAFKA_OPTS=-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent.jar=9404:/opt/jmx-exporter/jmx-exporter-config.yaml
    ports:
      - "9404:9404"  # Expose the JMX Exporter HTTP endpoint
    volumes:
      - ./jmx_prometheus_javaagent.jar:/opt/jmx-exporter/jmx_prometheus_javaagent.jar
      - ./jmx-exporter-config.yaml:/opt/jmx-exporter/jmx-exporter-config.yaml
    depends_on:
      - kafka  #  Ensures Kafka starts first, but doesn't wait for full readiness
    restart: always  #  Ensures app restarts if Kafka wasn't ready
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - kafka-streams-app
    restart: always
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: always
    networks:
      - monitoring

networks:
   monitoring:
     driver: bridge